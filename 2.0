#include "Arduino.h"

// Define pins and constants
#define BUZZER_PIN 8      // Buzzer on GPIO8
#define TONE_FREQ 1000    // Tone frequency in Hz (1kHz)
#define TOUCH_THRESHOLD 1500 // Touch interrupt threshold (may need tuning)

// Variables
volatile bool touch1detected = false; // Flag for touch interrupt
bool isTouched = false;               // Tracks touch state
bool ledState = false;                // LED state
unsigned long lastBlink = 0;          // For non-blocking LED blinking
const long blinkInterval = 1000;      // 1-second blink interval

void IRAM_ATTR gotTouch1() {
  touch1detected = true; // Set flag in interrupt
}

void setup() {
  // Initialize serial for debugging
  Serial.begin(115200);
  delay(1000); // Time to open Serial Monitor
  Serial.println("\nESP32-S3 Touch, LED, and Buzzer Test\n");

  // Initialize pins
  pinMode(LED_BUILTIN, OUTPUT);  // Built-in LED
  pinMode(BUZZER_PIN, OUTPUT);   // Buzzer
  digitalWrite(LED_BUILTIN, LOW); // Ensure LED off at start
  digitalWrite(BUZZER_PIN, LOW);  // Buzzer off

  // Set up touch interrupt for T1 (GPIO1)
  touchAttachInterrupt(T1, gotTouch1, TOUCH_THRESHOLD);
}

void loop() {  
  // Handle touch detection
  if (touch1detected) {
    touch1detected = false; // Reset flag
    bool currentTouchState = touchInterruptGetLastStatus(T1);
    if (currentTouchState && !isTouched) {
      Serial.println(" --- T1 Touched");
      isTouched = true; // Set touch state
    } else if (!currentTouchState && isTouched) {
      Serial.println(" --- T1 Released");
      isTouched = false; // Clear touch state
      digitalWrite(LED_BUILTIN, LOW); // Ensure LED off on release
      ledState = false; // Reset LED state
    }
  }

  // Actions based on touch state
  if (isTouched) {
    // Blink LED (non-blocking)
    unsigned long currentMillis = millis();
    if (currentMillis - lastBlink >= blinkInterval) {
      ledState = !ledState; // Toggle LED
      digitalWrite(LED_BUILTIN, ledState);
      lastBlink = currentMillis;
    }

    // Play tone on buzzer
    tone(BUZZER_PIN, TONE_FREQ);
  } else {
    // Ensure LED and buzzer are off when not touched
    if (digitalRead(LED_BUILTIN) != LOW) {
      digitalWrite(LED_BUILTIN, LOW); // Force LED off
    }
    noTone(BUZZER_PIN); // Buzzer off
    ledState = false; // Reset LED state
  }

  delay(10); // Small delay for stability
}
